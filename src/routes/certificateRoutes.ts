import { Router, Response } from "express";
import { db } from "../helper/db";
import {
  AuthedRequest,
  requireAuth,
  requireOrgMember,
} from "../middleware/admin";

const router = Router();

// Generate certificate when course is completed
router.post(
  "/generate/:courseId",
  requireAuth,
  async (req: AuthedRequest, res: Response) => {
    try {
      const { courseId } = req.params;
      const userId = req.user?.id;

      if (!userId) {
        return res.status(401).json({
          success: false,
          message: "Authentication required",
        });
      }

      // Check if user has completed all chapters of the course
      const course = await db.course.findUnique({
        where: { id: courseId },
        include: {
          chapters: {
            include: {
              progress: {
                where: {
                  userId: userId,
                  completed: true,
                },
              },
            },
          },
        },
      });

      if (!course) {
        return res.status(404).json({
          success: false,
          message: "Course not found",
        });
      }

      const totalChapters = course.chapters.length;
      const completedChapters = course.chapters.filter(
        (chapter) => chapter.progress.length > 0
      ).length;

      if (completedChapters !== totalChapters) {
        return res.status(400).json({
          success: false,
          message: "Course not completed yet",
        });
      }

      // Check if certificate already exists
      const existingCertificate = await db.certificate.findUnique({
        where: {
          userId_courseId: {
            userId: userId,
            courseId: courseId,
          },
        },
      });

      if (existingCertificate) {
        return res.status(400).json({
          success: false,
          message: "Certificate already generated for this course",
          data: existingCertificate,
        });
      }

      // Get completion date (latest chapter completion)
      const latestProgress = await db.chapterProgress.findFirst({
        where: {
          userId: userId,
          chapter: { courseId: courseId },
          completed: true,
        },
        orderBy: { watchedAt: "desc" },
      });

      const completedAt = latestProgress?.watchedAt || new Date();

      // Generate certificate
      const certificate = await db.certificate.create({
        data: {
          userId: userId,
          courseId: courseId,
          completedAt: completedAt,
          // certificateUrl can be generated by a certificate service
          certificateUrl: null, // Will be updated after certificate generation
        },
        include: {
          user: {
            select: { id: true, name: true, email: true },
          },
          course: {
            select: { id: true, title: true, category: true },
          },
        },
      });

      // TODO: Here you would call your certificate generation service
      // and update the certificateUrl field

      res.json({
        success: true,
        message: "Certificate generated successfully",
        data: certificate,
      });
    } catch (error) {
      console.error("Generate certificate error:", error);
      res.status(500).json({
        success: false,
        message: "Error generating certificate",
      });
    }
  }
);

// Get user's certificates
router.get(
  "/my-certificates",
  requireAuth,
  async (req: AuthedRequest, res: Response) => {
    try {
      const userId = req.user?.id;

      if (!userId) {
        return res.status(401).json({
          success: false,
          message: "Authentication required",
        });
      }

      const certificates = await db.certificate.findMany({
        where: { userId: userId },
        include: {
          course: {
            select: {
              id: true,
              title: true,
              category: true,
              thumbnail: true,
            },
          },
        },
        orderBy: { issuedAt: "desc" },
      });

      res.json({
        success: true,
        data: certificates,
      });
    } catch (error) {
      console.error("Get certificates error:", error);
      res.status(500).json({
        success: false,
        message: "Error fetching certificates",
      });
    }
  }
);

// Get specific certificate
router.get(
  "/:certificateId",
  requireAuth,
  async (req: AuthedRequest, res: Response) => {
    try {
      const { certificateId } = req.params;
      const userId = req.user?.id;

      const certificate = await db.certificate.findFirst({
        where: {
          id: certificateId,
          userId: userId, // Ensure user can only access their own certificates
        },
        include: {
          user: {
            select: { id: true, name: true, email: true },
          },
          course: {
            select: {
              id: true,
              title: true,
              category: true,
              description: true,
            },
          },
        },
      });

      if (!certificate) {
        return res.status(404).json({
          success: false,
          message: "Certificate not found",
        });
      }

      res.json({
        success: true,
        data: certificate,
      });
    } catch (error) {
      console.error("Get certificate error:", error);
      res.status(500).json({
        success: false,
        message: "Error fetching certificate",
      });
    }
  }
);

// Get organization employees' certificates (for org admin)
router.get(
  "/org/certificates",
  requireOrgMember,
  async (req: AuthedRequest, res: Response) => {
    try {
      const organizationId = req.user?.organizationId;

      if (!organizationId) {
        return res.status(400).json({
          success: false,
          message: "Organization ID required",
        });
      }

      // Get all employee IDs in the organization
      const employees = await db.organizationUser.findMany({
        where: { organizationId: organizationId },
        select: { userId: true },
      });

      const employeeIds = employees.map((emp) => emp.userId);

      const certificates = await db.certificate.findMany({
        where: {
          userId: { in: employeeIds },
        },
        include: {
          user: {
            select: { id: true, name: true, email: true },
          },
          course: {
            select: { id: true, title: true, category: true },
          },
        },
        orderBy: { issuedAt: "desc" },
      });

      res.json({
        success: true,
        data: certificates,
      });
    } catch (error) {
      console.error("Get org certificates error:", error);
      res.status(500).json({
        success: false,
        message: "Error fetching organization certificates",
      });
    }
  }
);

export default router;
